<?php

namespace App\Tests;

use App\Entity\Movie;
use App\Model\MovieModel;
use PDO;
use PHPUnit\Framework\TestCase;

class MovieModelTest extends TestCase
{
    private array $movie;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->movie = [
            "title"=>"title",
            "overview"=>"overview",
            "tagline" => "tagline",
            "genre_id" => "11",
            "poster" => "poster.jpg",
            "release_date" => "2020-01-01"
        ];

    }

    /**
     * @covers
     */
    public function testValidate()
    {
        $pdoDummy = $this->createPartialMock(PDO::class, []);
        $movieStub = $this->createStub(Movie::class);

        $movieModel = new movieModel($pdoDummy);

        $movieStub->method("getTitle")
            ->willReturn("Acme Corporation");

        $movieStub->method("getOverview")
            ->willReturn("Acme Corporation");

        $movieStub->method("getReleaseDate")
            ->willReturn("2021-01-25");

        $errors = $movieModel->validate($movieStub);
        $this->assertCount(0, $errors);
    }

    /**
     * @covers
     */
    public function testValidateWithFails()
    {
        $pdoDummy = $this->createPartialMock(PDO::class, []);
        $movieStub = $this->createStub(Movie::class);

        $movieModel = new movieModel($pdoDummy);

        $movieStub->method("getReleaseDate")
            ->willReturn("12/01/2021");

        $errors = $movieModel->validate($movieStub);
        $this->assertCount(3, $errors);
    }

    /**
     * @covers
     */
    public function testLoadData() {
        $pdoDummy = $this->createPartialMock(PDO::class, []);
        $movieStub = $this->createStub(Movie::class);

        $movieModel = new movieModel($pdoDummy);

        $movie = $movieModel->loadData($this->movie, $movieStub);
        $this->assertInstanceOf(Movie::class, $movie);
    }

}
